{% if cookiecutter.dependency_manager != 'pip' -%}
[tool.poetry]
name = "{{cookiecutter.project_name}}"
description = "{{cookiecutter.project_description}}"
version = "0.0.0"
authors = [
    "{{cookiecutter.author_name}} <{{cookiecutter.email}}>",
]
readme = "README.md"
license = {{'"MIT"' if cookiecutter.open_source == "y" else '"Proprietary"'}}
repository = "https://github.com/alexandrainst/{{cookiecutter.project_name}}"

[tool.poetry.dependencies]
python = ">={{ cookiecutter.python_version }}"
hydra-core = "^{{ cookiecutter._hydra_version }}"

[tool.poetry.group.dev.dependencies]
pytest = ">={{ cookiecutter._pytest_version }}"
pytest-cov = ">={{ cookiecutter._pytest_cov_version }}"
pre-commit = ">={{ cookiecutter._pre_commit_version }}"
pdoc = ">={{ cookiecutter._pdoc_version }}"
readme-coverage-badger = ">={{ cookiecutter._readme_coverage_badger_version }}"
click = ">={{ cookiecutter._click_version }}"
ruff = ">={{ cookiecutter._ruff_version }}"
mypy = ">={{ cookiecutter._mypy_version }}"
nbstripout = ">={{ cookiecutter._nbstripout_version }}"

[[tool.poetry.source]]
name = "pypi"
{% else -%}
[project]
name = "{{cookiecutter.project_name}}"
description = "{{cookiecutter.project_description}}"
version = "0.0.0"
readme = "README.md"
authors = [
    {name = "{{cookiecutter.author_name}}", email = "{{cookiecutter.email}}"},
]
requires-python = ">={{ cookiecutter.python_version }}"
dependencies = [
    "hydra-core=={{ cookiecutter._hydra_version }}",
]

[project.urls]
Repository = "https://github.com/alexandrainst/{{cookiecutter.project_name}}"
Issues = "https://github.com/alexandrainst/{{cookiecutter.project_name}}/issues"

[project.license]
file = "LICENSE"

[project.optional-dependencies]
dev = [
    "pytest>={{ cookiecutter._pytest_version }}",
    "pytest-cov>={{ cookiecutter._pytest_cov_version }}",
    "pre-commit>={{ cookiecutter._pre_commit_version }}",
    "pdoc>={{ cookiecutter._pdoc_version }}",
    "readme-coverage-badger>={{ cookiecutter._readme_coverage_badger_version }}",
    "click>={{ cookiecutter._click_version }}",
    "ruff>={{ cookiecutter._ruff_version }}",
    "mypy>={{ cookiecutter._mypy_version }}",
    "nbstripout>={{ cookiecutter._nbstripout_version }}",
    "coverage>={{ cookiecutter._coverage_version }}",
    "toml>={{ cookiecutter._toml_version }}",
]
{% endif %}
[tool.ruff]
{% if cookiecutter.python_version == '3.13' -%}
target-version = "py313"
{% elif cookiecutter.python_version == '3.12' -%}
target-version = "py312"
{% elif cookiecutter.python_version == '3.11' -%}
target-version = "py311"
{% elif cookiecutter.python_version == '3.10' -%}
target-version = "py310"
{% elif cookiecutter.python_version == '3.9' -%}
target-version = "py39"
{% elif cookiecutter.python_version == '3.8' -%}
target-version = "py38"
{% elif cookiecutter.python_version == '3.7' -%}
target-version = "py37"
{% elif cookiecutter.python_version == '3.6' -%}
target-version = "py36"
{% endif %}
line-length = 88
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
]
extend-include = [
    "*.ipynb",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
skip-magic-trailing-comma = true

[tool.ruff.lint]
extend-select = [
    "I",
    "D",
]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
    "F401",
]
"src/scripts/main.py" = [
    "I",
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    '--durations=10',
    '--color=yes',
    '--doctest-modules',
    '--cov=src/{{cookiecutter.project_name}}',
]
xfail_strict = true
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore::FutureWarning",
]
log_cli_level = "info"
testpaths = [
    "tests",
    "src/{{cookiecutter.project_name}}",
]

[build-system]
{% if cookiecutter.dependency_manager != 'pip' -%}
requires = [
    "poetry-core>={{ cookiecutter._poetry_core_version }}",
]
build-backend = "poetry.core.masonry.api"
{% else -%}
requires = [
    "setuptools>={{ cookiecutter._setuptools_version }}",
]
build-backend = "setuptools.build_meta"
{% endif -%}
